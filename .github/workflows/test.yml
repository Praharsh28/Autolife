name: AutoLife CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for coverage reports
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg xvfb libxkbcommon-x11-0 libxcb-icccm4 \
          libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
          libxcb-xinerama0 libxcb-xfixes0 x11-utils

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ffmpeg -y
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]  # Install package in editable mode with test dependencies
        pip install pytest-xdist pytest-cov pytest-qt pytest-xvfb pytest-timeout pytest-mock pytest-html pytest-metadata pytest-github-actions-annotate-failures
    
    - name: Start Xvfb (Linux)
      if: runner.os == 'Linux'
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo "DISPLAY=:99.0" >> $GITHUB_ENV
    
    - name: Run tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        QT_QPA_PLATFORM: offscreen
        HUGGINGFACE_API_TOKEN: ${{ secrets.HUGGINGFACE_API_TOKEN }}
        TEST_ENV: ${{ github.event.inputs.environment || 'production' }}
      run: |
        python -m pytest -v -n auto --dist=loadscope \
          -m "not gpu" \
          --cov=modules \
          --cov-report=xml \
          --cov-report=html \
          --html=test_report.html \
          --self-contained-html \
          --json-report \
          --json-report-file=test_results.json \
          --metadata-from-env \
          --capture=tee-sys

    - name: Generate detailed test report
      if: always()
      run: |
        python tests/generate_report.py \
          --test-results test_results.json \
          --coverage-xml coverage.xml \
          --template tests/test_report_template.html \
          --output detailed_test_report.html

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          test_report.html
          detailed_test_report.html
          htmlcov/
          coverage.xml
          test_results.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        flags: ${{ matrix.os }},python${{ matrix.python-version }}

  deploy:
    name: Deploy Test Reports
    needs: test
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Deploy reports to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
        full_commit_message: Update test reports
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
